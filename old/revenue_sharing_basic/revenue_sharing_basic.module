<?php
//$Id$
// Copyright 2005-2008 Khalid Baheyeldin http://2bits.com

/**
 * Implementation of hook_menu().
 */
function revenue_sharing_basic_menu() {
  $items = array();

  $items['admin/settings/adsense/revenue_sharing_basic'] = array(
    'title' => 'Basic Revenue Sharing',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('revenue_sharing_basic_settings'),
    'access arguments' => array('administer adsense'),
    'type' => MENU_CALLBACK,
    'file' => 'revenue_sharing_basic.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_requirements().
 */
function revenue_sharing_basic_requirements($phase) {
  $requirements = array();
  $t = get_t();
  switch ($phase) {
    // At runtime, make sure that we have a publisher ID
    case 'runtime':
      if (variable_get('cache', 0)) {
        $requirements['adsense_basic_id'] = array(
          'title' => $t('Revenue Sharing (basic)'),
          'value' => $t('Drupal page cache is enabled. This causes conflicts with revenue sharing, since the pages are stored in the cache and are not dynamically generated. If you experience issues with revenue sharing, then disable the page cache.'),
          'severity' => REQUIREMENT_WARNING,
        );
      }
      break;
  }
  return $requirements;
}

function revenue_sharing_basic_adsense($op, $args = array()) {
  static $client_id = NULL;

  switch ($op) {
    case 'settings':
        return array(
          'name' => 'Revenue sharing (basic)',
          'path' => 'revenue_sharing_basic',
        );
      break;
    case 'client_id':
      if (!$client_id) {
        // We cache the client ID on this page load, to make sure all of the
        // client IDs on one page are the same
        $client_id = revenue_sharing_basic_choose_client($args);
      }

      return $client_id;
  }
}

function revenue_sharing_basic_choose_client($format) {
  if ($format) {
    // This module can't handle the selection of an appropriate Slot ID
    // Give up!
    return NULL;
  }

  $site_client = variable_get('adsense_basic_id', '');

  if (!variable_get('revenue_sharing_basic_revenue_enable', 0)) {
    return $site_client;
  }

  $uid = revenue_sharing_basic_get_node_uid();
  $percent_author   = variable_get('revenue_sharing_basic_percentage_author', 0);
  $percent_referral = variable_get('revenue_sharing_basic_percentage_refer', 0);

  // Toss the dice and see who gets their ad displayed
  $random = mt_rand(1, 100);
  if ($random <= $percent_author) {
    $client = revenue_sharing_basic_get_profile_client_id($uid);
  }
  elseif ($random <= ($percent_author + $percent_referral)) {
    $client = revenue_sharing_basic_get_referral_client_id($uid);
  }
  else {
    $client = $site_client;
  }

  // Last check to see that we have a valid client
  if (!$client) {
    $client = $site_client;
  }

  return $client;
}

function revenue_sharing_basic_get_profile_client_id($uid = NULL) {
  $client_id = NULL;

  if ($uid) {
    // Get the profile field for a certain user
    $profile_field = variable_get('revenue_sharing_basic_client_id_profile_field', 0);
    $client_id = db_result(db_query('SELECT value FROM {profile_values} WHERE fid = %d AND uid = %d', $profile_field, $uid));
  }

  return $client_id;
}

function revenue_sharing_basic_get_node_uid() {
  static $node_uid = NULL;

  if ((!$node_uid) && (arg(0) == 'node') && is_numeric(arg(1))) {
    $node = node_load(arg(1));

    // Cache the results
    $node_uid = $node->uid;
  }

  return $node_uid;
}

function revenue_sharing_basic_get_referral_client_id($uid) {
  if (module_exists('referral')) {
    $referral_uid = referral_get_user($uid);
    if ($referral_uid) {
      return revenue_sharing_basic_get_profile_client_id($referral_uid);
    }
  }
  // User was not referred by an existing user
  return NULL;
}
