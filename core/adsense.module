<?php

/**
 * @file
 * Displays Google AdSense ads on Drupal pages.
 *
 * This is the core module of the AdSense package, with the Drupal hooks
 * and other administrative functions.
 */

use Drupal\adsense\AdsenseAdBase;
use Drupal\adsense\ContentAdBase;

// Ad types, link or ad.
define('ADSENSE_TYPE_LINK', 1);
define('ADSENSE_TYPE_AD', 2);
define('ADSENSE_TYPE_SEARCH', 3);

define('ADSENSE_MAX_CHANNELS', 10);
define('ADSENSE_AD_CHANNEL_DEFAULT', '');

/**
 * Implements hook_theme().
 */
function adsense_theme() {
  return array(
    'adsense_ad' => array(
      'variables' => array('content' => NULL, 'width' => NULL, 'height' => NULL, 'format' => NULL),
      'function' => 'theme_adsense_ad',
    ),
    'adsense_placeholder' => array(
      'variables' => array('content' => NULL, 'width' => NULL, 'height' => NULL, 'format' => NULL),
      'function' => 'theme_adsense_placeholder',
    ),
  );
}

/**
 * Default AdSense ad unit theming. Simply add a div with the adsense and $module classes
 *
 * @param array $vars
 *   string with the generated ad unit
 *
 * @return string
 *   string with the modified ad unit
 *
 * @ingroup themeable
 */
function theme_adsense_ad($vars) {
  if ((!empty($vars['width'])) && (!empty($vars['height']))) {
    $width = $vars['width'];
    $height = $vars['height'];
  } elseif (!empty($vars['format'])) {
    list($width, $height) = ContentAdBase::dimensions($vars['format']);
  }

  // Handle old argument names (ad instead of content)
  if (!empty($vars['content'])) {
    $content = $vars['content'];
  }
  elseif (!empty($vars['ad'])) {
    $content = $vars['ad'];
  }
  else {
    $content = '<-- empty ad content -->';
  }

  $style = ((!empty($width)) && (!empty($height))) ? "style='width:{$width}px;height:{$height}px;'" : '';

  return "<div class='adsense' ${style}>\n{$content}\n</div>";
}

/**
 * Generate a box to display instead of the ad when it is disabled
 *
 * @return string
 *   string with the HTML text to create the box
 *
 * @ingroup themeable
 */
function theme_adsense_placeholder($vars) {
  if ((!empty($vars['width'])) && (!empty($vars['height']))) {
    $width = $vars['width'];
    $height = $vars['height'];
  }
  elseif (!empty($vars['format'])) {
    list($width, $height) = ContentAdBase::dimensions($vars['format']);
  }

  // Handle old argument names (text instead of content)
  $content = \Drupal::config('adsense.settings')->get('adsense_placeholder_text');
  if (!empty($vars['content'])) {
    $content .= "<br/>" . $vars['content'];
  }
  elseif (!empty($vars['text'])) {
    $content .= "<br/>" . $vars['text'];
  }
  else {
    $content .= '<!-- empty ad content -->';
  }

  // Use inline style to set height and width
  $style = ((!empty($width)) && (!empty($height))) ? "style='width:" . ($width - 2) ."px;height:" . ($height - 2) . "px;'" : '';

  return "<div class='adsense adsense-placeholder' ${style}>\n{$content}\n</div>";
}


/**
 * Implements hook_help().
 */
function adsense_help($path, $arg) {
  switch ($path) {
    case 'admin/help#adsense':
      module_load_include('inc', 'adsense', 'help/adsense.help');
      return adsense_help_text();
  }
  return '';
}

/**
 * Provides the Google AdSense Publisher ID / slot ID to be used in the ad.
 *
 * If revenue sharing modules are installed, this function will call the
 * appropriate function in those modules.
 *
 * @param $format
 *   format of the ad being generated (optional)
 *
 * @return mixed
 *   If the format parameter is supplied, array with 'client' and 'slot'
 *   fields, otherwise just the Publisher ID string is returned.
 */
function adsense_get_client_slot_id($format = NULL) {
  // Get the configured function
  // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/adsense.settings.yml and config/schema/adsense.schema.yml.
$function = \Drupal::config('adsense.settings')->get('adsense_id_module');

  if ($function != ADSENSE_ID_MODULE_DEFAULT) {
    // Call the function
    if (function_exists($function)) {
      $client_id = $function('client_id', $format);
      if ($client_id) {
        return $client_id;
      }
    }
  }
  // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/adsense.settings.yml and config/schema/adsense.schema.yml.
return \Drupal::config('adsense.settings')->get('adsense_basic_id');
}

/**
 * Generates the Google AdSense Ad
 *
 * @param array $args
 *   An array of arguments (format, group, channel or slot)
 *
 * A valid format must always be provided. If a slot is provided, the ad is generated by the
 * new format modules, if not then the 'old' format modules are attempted.
 *
 * @return string
 *   Publisher ID string
 *
 */
function adsense_display($args) {
  if (!is_array($args)) {
    // 'old' method of calling this function is not supported in version >= 8.x
    // adsense_display($format = '160x600', $group = 1, $channel = 1, $slot = '', $referral = 0, $cpa = ''
    return '<!--adsense: old adsense_display call syntax not supported -->';
  }

  $ad = AdsenseAdBase::createAd($args);

  return TRUE;

  $ad = adsense_ad_formats($args['format']);

  if ($ad == NULL) {
    $ad = '<!--adsense: invalid format: ' . $args['format'] . '-->';
  }
  elseif (!_adsense_page_match()) {
    // Check first if disabled or if we are at adsense limit or if this page doesn't allow adsense
    $ad = '<!--adsense: page not in match list-->';
  }
  elseif (!_adsense_can_insert_another($ad['type'])) {
    $ad = '<!--adsense: ad limit reached for type-->';
  }
  elseif (!_adsense_check_if_enabled()) {
    $user = \Drupal::currentUser();

    // Ads are disabled
    // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/adsense.settings.yml and config/schema/adsense.schema.yml.
if (\Drupal::config('adsense.settings')->get('adsense_placeholder') || ($user->uid == 1 || \Drupal::currentUser()->hasPermission('show adsense placeholders'))) {
      $width = array_key_exists('width', $ad) ? $ad['width'] : 0;
      $height = array_key_exists('height', $ad) ? $ad['height'] : 0;
      // The text to display in the placeholder starts with the block title,
      // and then the default text as specified in the admin settings.
      $text = isset($args['title']) ? t('Block') . ': ' . $args['title'] . '<br />' : '';
      // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/adsense.settings.yml and config/schema/adsense.schema.yml.
$text .= \Drupal::config('adsense.settings')->get('adsense_placeholder_text') . ' ' . $args['format'];
      if ((isset($user) && ($user->uid == 1)) || \Drupal::currentUser()->hasPermission('show adsense placeholders')) {
        $text = t('Ads disabled for %name', array('%name' => $user->name)) . '<br />' . $text;
      }

      $ad = "<!--adsense: placeholder-->\n" . _theme('adsense_placeholder', array('text' => $text, 'width' => $width, 'height' => $height));
    }
    else {
      $ad = '<!--adsense: ads disabled -->';
    }
  }
  else {
    // If site Slot ID for this ad was passed, pass the format as argument
    // in case Publisher ID modules are enabled that can return different
    // Slot IDs per ad format
    $client_id_arg = !empty($args['slot']) ? $args['format'] : NULL;
    $client = adsense_get_client_slot_id($client_id_arg);

    if (is_array($client)) {
      // An array was received, use that Slot ID
      $slot = $client['slot'];
      $client = $client['client'];
    }
    elseif (isset($args['slot'])) {
      // Use the original site Slot ID
      $slot = $args['slot'];
    }

    // Ad should be displayed
    switch ($args['format']) {
      case 'Search Box':
        if (!empty($slot) && \Drupal::moduleHandler()->moduleExists('adsense_cse')) {
          $ad = _adsense_cse_get_searchbox($client, $slot);
          $module = 'adsense_cse';
        }
        elseif (\Drupal::moduleHandler()->moduleExists('adsense_search')) {
          $ad = _adsense_search_get_searchbox($client, $args['channel']);
          $module = 'adsense_search';
        }
        else {
          $ad = '<!--adsense: no AdSense for Search module found-->';
        }
        break;
      default:
        if (!empty($slot) && \Drupal::moduleHandler()->moduleExists('adsense_managed')) {
          $ad = _adsense_managed_get_ad($args['format'], $client, $slot, $args['shape']);
          $module = 'adsense_managed';
        }
        elseif (\Drupal::moduleHandler()->moduleExists('adsense_oldcode')) {
          $ad = _adsense_oldcode_get_ad($args['format'], $client, $args['group'], $args['channel']);
          $module = 'adsense_oldcode';
        }
        else {
          $ad = '<!--adsense: no AdSense for Content module found-->';
          $module = '';
        }

        // Display ad-block disabling request
        // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/adsense.settings.yml and config/schema/adsense.schema.yml.
if (\Drupal::config('adsense.settings')->get('adsense_unblock_ads')) {
          adsense_request_unblock();
        }
        // If test mode, ad is already themed
        // @FIXME
// Could not extract the default value because it is either indeterminate, or
// not scalar. You'll need to provide a default value in
// config/install/adsense.settings.yml and config/schema/adsense.schema.yml.
if (!\Drupal::config('adsense.settings')->get('adsense_test_mode')) {
          $ad = _theme('adsense_ad', array('ad' => $ad, 'module' => $module, 'format' => $args['format']));
        }

        break;
    }
    // Remove empty lines
    $ad = str_replace("\n\n", "\n", $ad);
  }

  return $ad;
}

/**
 * Displays a request to disable adblockers, when their use is detected
 */
function adsense_request_unblock() {
  static $done = FALSE;

  if (!$done) {
    // @FIXME
// CSS, JavaScript, and libraries are now attached directly to render arrays
// using the #attached property. drupal_add_js() is internal and should never be
// called directly.
// 
// 
// @see https://www.drupal.org/node/2169605
// drupal_add_js(file_get_contents(drupal_get_path('module', 'adsense') .'/js/unblock.js'), 'inline');

    $done = TRUE;
  }
}


/**
 * Helper function to verify if ads are currently enabled
 *
 * @return bool
 *   TRUE if ad display is enabled, FALSE otherwise
 */
function _adsense_check_if_enabled() {
  if (!\Drupal::config('adsense.settings')->get('adsense_basic_id')) {
    // Google AdSense Publisher ID is not configured
    return FALSE;
  }
  if (\Drupal::config('adsense.settings')->get('adsense_disable')) {
    return FALSE;
  }
  if (\Drupal::config('adsense.settings')->get('adsense_test_mode')) {
    return TRUE;
  }
  if (\Drupal::currentUser()->hasPermission('hide adsense')) {
    return FALSE;
  }
  if (\Drupal::currentUser()->hasPermission('show adsense placeholders')) {
    // AdSense is enabled but this user should only see placeholders instead.
    return FALSE;
  }

  return TRUE;
}

/**
 * Determine if AdSense has reached limit on this page. As per Google's
 * policies, a page can have up to 3 ad units and 3 link units.
 *
 * @return bool
 *   TRUE if we can insert another ad, FALSE if not allowed.
 */
function _adsense_can_insert_another($type = ADSENSE_TYPE_AD) {
  static $num_ads = array(
    ADSENSE_TYPE_AD     => 0,
    ADSENSE_TYPE_LINK   => 0,
    ADSENSE_TYPE_SEARCH => 0,
  );

  $max_ads = array(
    ADSENSE_TYPE_AD     => 3,
    ADSENSE_TYPE_LINK   => 3,
    ADSENSE_TYPE_SEARCH => 2,
  );

  if ($num_ads[$type] < $max_ads[$type]) {
    $num_ads[$type]++;
    return TRUE;
  }

  // Because of #1627846, it's better to always return TRUE
  return TRUE;
//  return FALSE;
}

